
// Create Event
// SETUP //

// Variable related to the time untill the game is over / ziggurat reached hell
tim = 0;

Border("generate", 0, 100 + 16, 60 + 16 - 1); // Title Box
for (i = 1; i &lt; 4; i += 1) Border("generate", i, 344, 66); // Game Slot
Border("generate", 4, 100, 32); // Back
Border("generate", 5, 100, 32); // Obliterate
Border("generate", 6, 320 + 8, 176 - 22); // Settings
Border("generate", 7, 320 + 8, 32); // Settings - Return
for (i = 8; i &lt; 11; i += 1) Border("generate", i, 106, 32); // 8, 9, 10 = General, Controls, Dicks
Border("generate", 11, 256, 64); // Get key
// Four buttons for when doing quest
for (i = 12; i &lt; 16; i += 1)
{
    Border("generate", i, 180, 32);
}

darkness = 0;
active = true;
timer_cc = 0;

for (i = 0; i &lt; 3; i += 1) gamHil[i] = 0;

text_color_normal = c_gray; // For text that cannot be interacted with
text_color_button = c_ltgray; // Text that can be clicked
text_color_hover  = c_white;
text_color_select = c_orange;

// Title page // 746 is reduction on nebula
title_time = 0;
tim = 0; // 0 - 1 value for title screen

titleCount = 0;
title_width = 1000 - 384; // 616
i = 0;


title_sprite[i] = sTitleStarfieldDim;
title_offset_x[i] = 0;
title_shift_x[i] = -60; // Maximum x pixels it can shift
i += 1;

title_sprite[i] = sTitleNebulaBlueMid;
title_offset_x[i] = 40;
title_shift_x[i] = -300; // Maximum x pixels it can shift
i += 1;

title_sprite[i] = sTitleNebulaBlue;
title_offset_x[i] = 0;
title_shift_x[i] = -450; // Maximum x pixels it can shift
i += 1;

title_sprite[i] = sTitleNebulaBlueBottom;
title_offset_x[i] = 150;
title_shift_x[i] = -600; // Maximum x pixels it can shift
i += 1;

title_sprite[i] = sTitleStarfieldBright;
title_offset_x[i] = 0;
title_shift_x[i] = -150; // Maximum x pixels it can shift
shinestarAnim = 0;
i += 1;

title_sprite[i] = sTitleNebulaRed;
title_offset_x[i] = 524;
title_shift_x[i] = -910; // Maximum x pixels it can shift
i += 1;

title_sprite[i] = sTitleNebulaRedHell;
title_offset_x[i] = 944;
title_shift_x[i] = -1100; // Maximum x pixels it can shift
i += 1;

title_sprite[i] = sTitleNebulaRedSmoke;
title_offset_x[i] = 1220+143;
title_shift_x[i] = -1200; // Maximum x pixels it can shift
i += 1;

titleAnimFace = 0;
title_sprite[i] = sTitleNebulaRedFaces;
title_offset_x[i] = 1220;
title_shift_x[i] = -1200; // Maximum x pixels it can shift
i += 1;

titleHellmouthAnim = 0;
title_sprite[i] = sTitleHellMouth;
title_offset_x[i] = 1210 - 400;
title_shift_x[i] = -title_width; // Maximum x pixels it can shift
i += 1;

titleZigAnim = 0;
title_sprite[i] = sTitleZiggurat;
title_offset_x[i] = (384 / 2) - 96;
title_shift_x[i] = 96; // Maximum x pixels it can shift
i += 1;
// Y offset and y float are in event user 10

repeat(40)
{
    instance_create(irandom(room_width),irandom(room_height),oTitleStarpass);
}

titleCount = i;

title_highlight_color = c_orange;
title_name[0] = "Game Time";
title_name[1] = "Settings";
title_name[2] = "Quit";

title_highlight[0] = false;
title_highlight[1] = false;
title_highlight[2] = false;
title_x = 142;
title_y = 170;

title_row = 16;
title_gap = 0;

// Character page //
character[0] = false;
character[1] = false;
character[2] = false;
character[3] = false;
character_x = 20;
character_y = 20;
character_row = 20;
character_gap = 5;

character_name[0] = "Create Character";
character_name[1] = "Play as X114JAM9";
character_name[2] = "Skip the Stupid Prologue";
character_name[3] = "Return";

// Settings page //
settings_x = 40;
settings_y = 64 - 6;
settings_row = 16;
settings_gap = 0;
settings_width = (24 * 8);
settings_option_x = 143 - 32;

settings_tab_y = settings_y - 48;
settings_tab[0] = "General";
settings_tab[1] = "Controls";
settings_tab[2] = "Gamepad";
for (i = 0; i &lt; 3; i += 1) 
{
    settings_tab_highlight[i] = 0;
    settings_tab_select[i] = 0;
}
settings_tab_select[0] = 1;

settings_highlight_color = c_orange;

settings_name[0] = "Music:";
settings_highlight[0] = -1;
settings_select[0] = round(global.bgm_gain_master*20);
settings_options[0] = 20;
settings_option[0, 0] = "&lt;";
settings_option[0, 1] = "&gt;";

settings_name[1] = "Sound:";
settings_highlight[1] = -1;
settings_select[1] = round(global.sfx_gain_master*20);
settings_options[1] = 20;
settings_option[1, 0] = "&lt;";
settings_option[1, 1] = "&gt;";

//settings_name[2] = "Controls:";
//settings_highlight[0] = false;

settings_name[3] = "Filter:";
settings_highlight[3] = -1;
settings_select[3] = global.currentFilter;
settings_options[3] = 3;
settings_option[3, 0] = "CRT";
settings_option[3, 1] = "BLOOM";
settings_option[3, 2] = "NONE";

settings_name[4] = "Joke's:";
settings_highlight[4] = -1;
settings_select[4] = 0;
settings_options[4] = 2;
settings_option[4, 0] = "ON";
settings_option[4, 1] = "OFF";

settings_name[5] = "Language:";
settings_highlight[5] = -1;
settings_select[5] = global.AlBhed;
settings_options[5] = 2;
settings_option[5, 0] = "ANGLOAMERICAN";
settings_option[5, 1] = "AL BHED";

settings_name[6] = "Fullscreen:";
settings_highlight[6] = -1;
settings_select[6] = global.fullscreen;
settings_options[6] = 2;
settings_option[6, 0] = "WINDOWED";
settings_option[6, 1] = "FULLSCREEN";

settings_name[7] = "Scaling:";
settings_highlight[7] = -1;
settings_select[7] = global.screen_scale-2;
settings_options[7] = 3;
//settings_option[7, 0] = "1x";
settings_option[7, 0] = "2x";
settings_option[7, 1] = "3x";
settings_option[7, 2] = "4x";

settings_name[8] = "Return";

settings_return_y = settings_y + settings_row * 9 + settings_gap * 9 + 0;

settings_return = false;

settings_volume_music_down = false;
settings_volume_music_up = false;
settings_volume_sound_down = false;
settings_volume_sound_up = false;

// Gameslot page //
gameslot_highlight_color = c_orange;
gameslot_width = 344 - 8;

gameslot_x = 30;
gameslot_y = 10; 

gameslot_row = 60 - 2;
gameslot_gap = 10;  

event_user(3);

gameslot_highlight[0] = false;
gameslot_highlight[1] = false;
gameslot_highlight[2] = false;

gameslot_destruct_x = 244;
gameslot_destruct_y = 214;
gameslot_destruct_highlight = false;
gameslot_destruct_name = "Obliterate";

gameslot_back_x = 40;
gameslot_back_y = 214;
gameslot_back_highlight = false;
gameslot_back_name = "Back";
gameslot_selected = 0;

// Other garbage //
confirm_x = 132;
confirm_y = 150;
confirm_width = 50;
confirm_gap = 20;
yes_highlight = false;
no_highlight = false;

mode = "basic";
destruct = false;
stock_x[0] = 20;
stock_x[1] = 100;
stock_x[2] = 180;
stock_x[3] = 260;
stock_x[4] = 340;
stock_x[5] = 420;
stock_x[6] = 500;
stock_y = 225;

volume_music = round(global.bgm_gain_master*100);
volume_sound = round(global.sfx_gain_master*100);

slider_music = false;
slider_sound = false;
slider_mx = 200;
slider_sx = 200;
slider_my = 40;
slider_sy = 60;
slider_value_m = 0;
slider_value_s = 0;

// Sons of Tris- Uh I mean keymapping //
key_get = -1;
key_lag = 0;
key_x = 40;
key_y = 64 - 6;//24;
key_row = 16;
key_gap = 0;

key_highlight_color = make_color_rgb(240, 50, 255);
key_return = false;
key_highlight[0] = false;
key_highlight[1] = false;
key_highlight[2] = false;
key_highlight[3] = false;
key_highlight[4] = false;
key_highlight[5] = false;
key_highlight[6] = false;
key_highlight[7] = false;
key_highlight[8] = false;
key_highlight[9] = false;
key_highlight[10] = false;

key_name[0] = "Up:";
key_name[1] = "Down:";
key_name[2] = "Left:";
key_name[3] = "East:";
key_name[4] = "Action:";
key_name[5] = "Cancel:";
key_name[6] = "Item's:";
key_name[7] = "Zauber:";
key_name[8] = "Spindash:";
key_name[9] = "Gun's-Bag:";
key_name[10] = "Quickmenu:";
key_name[11] = "Slowmenu:";
key_name[12] = "Return";

key_mapped_to[0] = "UP";
key_mapped_to[1] = "DOWN";
key_mapped_to[2] = "LEFT";
key_mapped_to[3] = "RIGHT";
key_mapped_to[4] = "MOUSE1";
key_mapped_to[5] = "MOUSE2";
key_mapped_to[6] = "E";
key_mapped_to[7] = "R";
key_mapped_to[8] = "SPACE";
key_mapped_to[9] = "LF.SHIFT";
key_mapped_to[10] = "Q";
key_mapped_to[11] = "ESCAPE";

if (global.DEBUGMODE) debugMenu = instance_create(0,0,oTitleDebug);
logoXTimer = 0;
scr_rendermode_reset();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Pause //
if (global.DEBUGMODE and debugMenu.menuindex == "teleport") exit;
if paused() exit;

// Get click
action = 0;
cancel = 0;

if(shinestarAnim&lt;4)
{shinestarAnim+=0.5*dt();}
else
{
    shinestarAnim-=4;
}

if(titleZigAnim&lt;5)
{
    titleZigAnim+=0.5*dt();
}
else{titleZigAnim-=5;}

if(titleHellmouthAnim&lt;6)
{
    titleHellmouthAnim+=0.24*dt();
}
else{titleHellmouthAnim-=6;}

if(titleAnimFace&lt;10)
{
    titleAnimFace+=0.24*dt();
}
else{titleAnimFace-=10;}

if (global.keyinput_type == KEYINPUT_GAMEPAD)
{
    if (MiniKeyPress("action")) action = 1;
    if (MiniKeyPress("cancel")) cancel = 1;
              

    // offal: dirty hack for gamepad cursor control
    if (MiniKeyPress("right",1) || MiniKeyPress("left",1) || MiniKeyPress("up",1) || MiniKeyPress("down",1)) {
        
        var win_xmin = window_get_x();
        var win_xmax = win_xmin + window_get_width()-1;
        var win_ymin = window_get_y();
        var win_ymax = win_ymin + window_get_height()-1;
        
        if window_get_fullscreen() {
            win_xmin = 0;
            win_xmax = display_get_width();
            win_ymin = 0;
            win_ymax = display_get_height();
        }
    
        display_mouse_set(
            clamp(display_mouse_get_x() + (MiniKeyPress("right",1) - MiniKeyPress("left",1))*8, win_xmin, win_xmax),
            clamp(display_mouse_get_y() + (MiniKeyPress("down",1) - MiniKeyPress("up",1))*8, win_ymin, win_ymax)
        );
    }
}
else
{
    if (mouse_check_button_pressed(mb_left)) action = 1;
    if (mouse_check_button_pressed(mb_right)) cancel = 1;
}

// KB+M //
if (active)
{    
    if (mode == "basic")
    {
        // Highlight the buttons with mouse //
        title_highlight[0] = scr_mouse_rect(title_x, title_y + title_row * 0 + title_gap * 0, title_x + 100, title_y + title_row * 1 + title_gap * 0 - 1);
        title_highlight[1] = scr_mouse_rect(title_x, title_y + title_row * 1 + title_gap * 1, title_x + 100, title_y + title_row * 2 + title_gap * 1 - 1);
        title_highlight[2] = scr_mouse_rect(title_x, title_y + title_row * 2 + title_gap * 2, title_x + 100, title_y + title_row * 3 + title_gap * 2 - 1);
        
        // Click buttons with mouse //
        if (action)
        {
            if (title_highlight[0]) mode = "gameslot";
            else if (title_highlight[1]) mode = "settings";
            else if (title_highlight[2]) game_end();
        }
    }
        
    // Settings mode //
    else if (mode == "settings" || mode == "keymap" || mode == "gamepad")
    {
        if (key_get == -1)
        {
            // Tab select
            for (i = 0; i &lt; 3; i += 1)
            {
                settings_tab_highlight[i] = scr_mouse_rect(settings_x + (i * 111) - 8, settings_tab_y - 8, settings_x + (i * 111) + 98, settings_tab_y + 32);
            }
            // Return
            settings_return = scr_mouse_rect(settings_x - 8, settings_return_y, settings_x + 320, settings_return_y + 32);  
            // Process tabs + return
            if (action)
            {
                didSel = -1;
                if (settings_tab_highlight[0]) { mode = "settings"; didSel = 0; }
                if (settings_tab_highlight[1]) { mode = "keymap"; didSel = 1; }
                if (settings_tab_highlight[2]) { mode = "gamepad"; didSel = 2; }
                if (didSel != -1)
                {
                    for (i = 0; i &lt; 3; i += 1)
                    {
                        if (didSel == i) settings_tab_select[i] = 1;
                        else settings_tab_select[i] = 0;
                    }
                }
                if (settings_return) mode = "basic";  
            }
        }
        // Keymap Tab
        if (mode == "settings")
        {
            // Highlight the buttons with mouse //
            settings_volume_music_down = scr_mouse_rect(settings_x + 140, settings_y + settings_row * 0 + settings_gap * 0, settings_x + 160, settings_y + settings_row * 1 + settings_gap * 0);
            settings_volume_music_up = scr_mouse_rect(384 - settings_x - 20, settings_y + settings_row * 0 + settings_gap * 0, 384 - settings_x, settings_y + settings_row * 1 + settings_gap * 0);
            settings_volume_sound_down = scr_mouse_rect(settings_x + 140, settings_y + settings_row * 1 + settings_gap * 1, settings_x + 160, settings_y + settings_row * 2 + settings_gap * 1);
            settings_volume_sound_up = scr_mouse_rect(384 - settings_x - 20, settings_y + settings_row * 1 + settings_gap * 1, 384 - settings_x, settings_y + settings_row * 2 + settings_gap * 1);
            
            // Language + Fullscreen
            dry = settings_y + settings_row * (2 + 1) + settings_gap * (2 + 1);
            for (h = 3; h &lt; 8; h += 1)
            {
                var spc = settings_width / settings_options[h];
                drx = settings_x + settings_option_x;
                settings_highlight[h] = -1;
                for (i = 0; i &lt; settings_options[h]; i += 1)
                {
                    if (scr_mouse_rect(drx, dry, drx + spc - 1, dry + 15)) 
                    {
                        settings_highlight[h] = i;
                        if (action) {
                            settings_select[h] = i;
                            if(h == 3 ) {
                                global.currentFilter = settings_select[3];
                                global.scanlines = global.currentFilter == 0;
                                Config("save","Filter", global.currentFilter);
                            } else if(h == 4 ) {
                                //Joke's
                            } else if(h == 5){
                                global.AlBhed = settings_select[5];
                                Config("save","alBhed", global.AlBhed);
                            } else if(h == 6 ) {
                                global.fullscreen = settings_select[6];
                                with(o_control){                                     
                                    if global.fullscreen then event_user(2); else event_user(3);
                                }
                                Config("save","FullScreen", global.fullscreen);
                            } else if(h == 7) {
                                global.screen_scale = i + 2;
                                with(o_control){ 
                                    didScl = global.screen_scale;
                                    event_user(5);
                                }
                                Config("save","Scaling", global.screen_scale);
                            }
                        }
                    }
                    drx += spc;
                }
                dry += 16;
            }
            
            // Click buttons with mouse //
            if (action)
            {
                // Fluck with the volumes  //
                if settings_volume_music_down = true and volume_music &gt; 0 then {
                    volume_music -= 5;
                    global.bgm_gain_master = volume_music/100;
                    Config("save","MusicLevel", global.bgm_gain_master);
                }                
                if settings_volume_music_up = true and volume_music &lt; 100 then {
                    volume_music += 5;
                    global.bgm_gain_master = volume_music/100;
                    Config("save","MusicLevel", global.bgm_gain_master);
                }  
                if settings_volume_sound_down = true and volume_sound &gt; 0 then {
                    volume_sound -= 5;
                    global.sfx_gain_master = volume_sound/100;
                    Config("save","SoundLevel", global.sfx_gain_master);
                }  
                if settings_volume_sound_up = true and volume_sound &lt; 100 then {
                    volume_sound += 5;
                    global.sfx_gain_master = volume_sound/100;
                    Config("save","SoundLevel", global.sfx_gain_master);
                }              
                // Fluck with the settings  //           
                if (settings_return) mode = "basic";    
            }
                
            // Cancel out to title //
            if (cancel) mode = "basic";
        }
    }
        
    // Choose gameslot //
    else if (mode == "gameslot") then
    {
        // Highlight gameslot with mouse //
        for (i = 0; i &lt; 3; i += 1)
        {
            gameslot_highlight[i] = scr_mouse_rect(gameslot_x - 8, gameslot_y - 8 + gameslot_row * i + gameslot_gap * i, gameslot_x + gameslot_width, gameslot_y + gameslot_row * (i + 1) + gameslot_gap * i);
            if (action)
            {
                if (destruct)
                {
                    if gameslot_highlight[i] then 
                    {
                        gameslot_selected = i; 
                        mode = "destruct_confirm";
                        global.confirm = "";
                        obj = instance_create(0, 0, oConfirm);
                        obj.givTxt = "Is this the game you want to destruct?";
                    }  
                }
                else
                {
                    if gameslot_highlight[i] then 
                    {
                        global.currentSaveSlot = i;
                        gameslot_selected = i; 
                        if(gameslot_vacant[gameslot_selected]){
                            mode = "gamestart_character";
                        } else {
                            scr_savedata_load();
                            didGam = 3;
                            active = 0; 
                            timer_cc = 15;
                        }
                    } 
                }
            }
        }
        // Cancel out of destruct/oblityerate or straight back to title //
        if (cancel)
        {
            if (destruct) destruct = 0; else mode = "basic";
        }
        
        // Back and Obliterate //
        gameslot_back_highlight = scr_mouse_rect(gameslot_back_x, gameslot_back_y, gameslot_back_x + 100, gameslot_back_y + 20);
        if destruct = false then gameslot_destruct_highlight = scr_mouse_rect(gameslot_destruct_x, gameslot_destruct_y, gameslot_destruct_x + 100, gameslot_destruct_y + 20);
        
        // Click buttons with mouse //
        if (action)
        {
            // Pick gameslot //
            if destruct = false then
            {
                if gameslot_destruct_highlight = true then destruct = true;   
                else if gameslot_back_highlight = true then mode = "basic";     
            }
                
            // Destruct gameslot //
            else
            {
                if gameslot_back_highlight = true then destruct = false;
            } 
        }
    } 
        
    // Confirm destruct //
    else if (mode == "destruct_confirm")
    {
        if (instance_exists(oConfirm) == 0)
        {
            if (global.confirm == "yes")
            {
                gameslot_vacant[gameslot_selected] = true;
                mode = "gameslot";
                destruct = false;
            }
            if (global.confirm == "no")
            {
                mode = "gameslot";
            }
        }
    }
        
    // Pick your cahracter type: CC, Pax or Hoopz Robinson //
    else if (mode == "gamestart_character")
    {
        drx = (SCREEN_WIDTH / 2) - 90; //settings_x - 8;
        dry = gameslot_y + 40;//settings_return_y;
        didGam = -1;
            
        for (i = 0; i &lt; 3; i += 1)
        {
            gamHil[i] = scr_mouse_rect(drx, dry, drx + 180, dry + 32); 
            if (gamHil[i]) 
            {
                if (action) didGam = i;
            }
            dry += 40;
        }
        if (didGam != -1) { 
            active = 0; 
            timer_cc = 15;
        }
            
        // Return
        settings_return = scr_mouse_rect(settings_x - 8, settings_return_y, settings_x + 320, settings_return_y + 32);  
        // Process tabs + return
        if (action)
        {
            if (settings_return) mode = "gameslot";  
        }
                
        // Cancel out to gameslots //
        if (cancel) mode = "gameslot";
    }             
}
        
// Stock ticker //
for (i = 0; i &lt; 6; i += 1) 
{
    if (stock_x[i] &gt; -80) stock_x[i] -= 20 * dt_sec();
    else stock_x[i] = 500;
}
    
// Game start //
if (timer_cc &gt; 0)
{
    timer_cc -= dt();
    darkness += dt_sec();
    if (timer_cc &lt;= 0) {
        if(didGam == 0) {
            scr_savedata_delete();
            scr_savedata_reset();
            scr_player_newPlayerIdentity();
            CC("new player");
            room_goto(r_cc);
        }
        if(didGam == 1) {
            scr_savedata_delete();
            scr_savedata_reset();
            Game("new");
            CC("hoopz player");
        }
        if(didGam == 2) {
            Game("new from wilmer");
            CC("hoopz player");
        }
        if(didGam == 3) Game("load"); //LOAD SAVE
        instance_destroy(id);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw tab + return button
// Draw tabs
for (i = 0; i &lt; 3; i += 1)
{
    drx = settings_x - 8 + (i * 111);
    dry = settings_tab_y;
    Border("draw back", 8 + i, drx, dry);
    draw_set_color(text_color_button);
    draw_set_blend_mode(bm_add);
    if (settings_tab_highlight[i]) 
    { 
        draw_set_color(text_color_hover);
        draw_sprite_ext(s1x1, 0, drx, dry + 4, 102, 24, 0, c_white, 0.25);
    }
    if (settings_tab_select[i]) 
    { 
        draw_set_color(text_color_select); //merge_color(settings_highlight_color, c_white, 0.5));
        draw_sprite_ext(s1x1, 0, drx, dry + 4, 102, 24, 0, c_orange, 0.25);
    }
    draw_set_blend_mode(bm_normal);
    draw_set_halign(fa_center);   
    Text(drx + 55, dry + 11, settings_tab[i]);
    Border("draw border", 8 + i, drx, dry);
}

// Return
event_user(14);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="24">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw return button
drx = settings_x - 8;
dry = settings_return_y;
Border("draw back", 7, drx, dry);
draw_set_color(text_color_button);
draw_set_blend_mode(bm_add);
if (settings_return) 
{ 
    draw_set_color(text_color_hover);
    draw_sprite_ext(s1x1, 0, drx, dry + 4, 320, 24, 0, c_white, 0.25);
}
draw_set_blend_mode(bm_normal);
draw_set_halign(fa_center);   
Text(view_xview + 192, dry + 11, settings_name[8]);
Border("draw border", 7, drx, dry);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="23">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Game Slots
var spc = 12;

// Portrait //
draw_sprite(sGlebFace, 0, gameslot_x + 1, dry + 3);

// Name //
if gameslot_highlight[i] = false then draw_set_color(c_white);
else draw_set_color(gameslot_highlight_color);  
Text(gameslot_x + 40, dry + 2 + (spc * 0), gameslot_name[i]);

// Mood //
if gameslot_highlight[i] = false then draw_set_color(make_color_rgb(90, 240, 40));
else draw_set_color(gameslot_highlight_color);              
Text(gameslot_x + 40, dry + 2 + (spc * 1), gameslot_mood[i]);

// Level //
if gameslot_highlight[i] = false then draw_set_color(make_color_rgb(240, 240, 60));
else draw_set_color(gameslot_highlight_color);   
Text(gameslot_x + 40, dry + 2 + (spc * 2), gameslot_level[i]);

// Gorm Stones collected //
for (g=0; g&lt;gameslot_gormstones[i]; g+=1) draw_sprite(sGormstone, 0, gameslot_x + 40 + g * 12, dry + (spc * 3));

// Chapter title //
if gameslot_highlight[i] = false then draw_set_color(make_color_rgb(220, 220, 255));
else draw_set_color(gameslot_highlight_color);  
Text(gameslot_x + 120, dry + 2 + (spc * 0), gameslot_chapter[i], -1, 150);
//Text(gameslot_x + 120, gameslot_y + gameslot_row * i + gameslot_gap * i + 4 + (spc * 0), gameslot_chapter[i], -1, 150);

// Time and Location //
draw_set_halign(2);
if gameslot_highlight[i] = false then draw_set_color(c_white);
else draw_set_color(gameslot_highlight_color);  
Text(gameslot_x + 320, dry + 20, gameslot_gametime[i]);
Text(gameslot_x + 320, dry + 4, gameslot_location[i]); 
draw_set_halign(0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Title deal
//tim = mouse_x / 384;
draw_sprite_ext(s1x1, 0, 0, 0, 1000, 240, 0, c_black, 1);
for (i = 0; i &lt; titleCount; i += 1)
{
    drx = (title_shift_x[i] * tim) + title_offset_x[i];
    dry = 0;
    img = 0;
    col = c_white;
    
    if (title_sprite[i] == sTitleZiggurat)
    {
        shader_set(shader_hue);
        shader_set_uniform_f(shader_get_uniform(shader_hue, "argHue"), tim * 130);
        with(oTitleStarpass)
        {
            if(backLayer){event_perform(ev_draw,0);}
        }
        shader_reset();  
        dry = 240 / 2;
        img = titleZigAnim;
        dry += lengthdir_x(7, current_time / 50);
        if(tim&gt;0.3)
        {
            col = make_color_rgb(255-120*(tim-0.3),255-220*(tim-0.3),255-220*(tim-0.3));
        }
    }
    
    if(title_sprite[i] == sTitleNebulaRedFaces)
    {
        img = titleAnimFace;
    }
    
    if(title_sprite[i] == sTitleHellMouth)
    {
        img = titleHellmouthAnim;
    }
    
    if(title_sprite[i] ==sTitleStarfieldBright)
    {
        img = shinestarAnim;
    }
    
    draw_sprite_ext(title_sprite[i], img, drx, dry, 1, 1, 0, col, 1);
}

shader_set(shader_hue);
shader_set_uniform_f(shader_get_uniform(shader_hue, "argHue"), tim * 130);
with(oTitleStarpass)
{
    if(!backLayer){event_perform(ev_draw,0);} 
}
shader_reset();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
var i;
for (i = 0; i &lt; 3; i += 1) {
    if(!file_exists(working_directory+"\save"+string(i)+".b2")) {
        gameslot_vacant[i] = true;
        continue;
    }
    
    gameslot_vacant[i] = false;
    var f = file_text_open_read(working_directory + "\save"+string(i)+".b2");
    var str = "";
    while (!file_text_eof(f)) {
        str += file_text_readln(f);
    }
    file_text_close(f);

    global.savedata = json_decode(str);
    if(Quest("ccCompleted") == 1) {
        gameslot_name[i] = string(scr_savedata_get("quest.vars.playerNameFull"));
        gameslot_mood[i] = "Crestfallen";//scr_savedata_get();
        gameslot_level[i] = "Level "+string(scr_savedata_get("player.xp.level"));
        gameslot_chapter[i] = "Chapter name";
        gameslot_gormstones[i] = 1;//scr_savedata_get("money");
        gameslot_gametime[i] = string(scr_savedata_get("clock.time"));
        gameslot_location[i] = string(scr_savedata_get("map.room"));
        if(i == 0) tim = (24 - real(scr_savedata_get("clock.time")) / 3600)/24;

    } else {
        gameslot_vacant[i] = true;
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw Gamepad Menu
Border("draw back", 6, settings_x - 8, settings_y - 8 - 2 - 5);

drx = key_x + 11 - 3;//+ 5;
dry = key_y + 4;
i = 0;
gamSub[i] = 10; gamLef[i] = drx; gamTop[i] = dry; gamTxt[i] = "Movement"; i += 1;
dry += key_row * 1.5;
gamSub[i] = 11; gamLef[i] = drx; gamTop[i] = dry; gamTxt[i] = "Aiming"; i += 1;
dry += key_row * 1.5;
gamSub[i] = 5; gamLef[i] = drx; gamTop[i] = dry; gamTxt[i] = "Action"; i += 1;
dry += key_row;
gamSub[i] = 1; gamLef[i] = drx; gamTop[i] = dry; gamTxt[i] = "Holster"; i += 1;
dry += key_row;
gamSub[i] = 4; gamLef[i] = drx; gamTop[i] = dry; gamTxt[i] = "Roll"; i += 1;
dry += key_row;
gamSub[i] = 3; gamLef[i] = drx; gamTop[i] = dry; gamTxt[i] = "Quickmenu"; i += 1;
dry += key_row;
gamSub[i] = 15; gamLef[i] = drx; gamTop[i] = dry; gamTxt[i] = "Weapon &gt;"; i += 1;

drx = key_x + 11 - 3 + 144;
dry = key_y + 4;
gamSub[i] = 12; gamLef[i] = drx; gamTop[i] = dry; gamTxt[i] = "Gun'sbag"; i += 1;

dry += key_row;
gamSub[i] = 14; gamLef[i] = drx; gamTop[i] = dry; gamTxt[i] = "Item Next"; i += 1;
dry += key_row;
gamSub[i] = 2; gamLef[i] = drx; gamTop[i] = dry; gamTxt[i] = "Item Use"; i += 1;
dry += key_row;
gamSub[i] = 13; gamLef[i] = drx; gamTop[i] = dry; gamTxt[i] = "Zauber Next"; i += 1;
dry += key_row;
gamSub[i] = 7; gamLef[i] = drx; gamTop[i] = dry; gamTxt[i] = "Zauber Use"; i += 1;
dry += key_row * 1.5;
gamSub[i] = 6; gamLef[i] = drx; gamTop[i] = dry; gamTxt[i] = "Free Look"; i += 1;
dry += key_row * 1.5;
gamSub[i] = 9; gamLef[i] = drx; gamTop[i] = dry; gamTxt[i] = "Pause"; i += 1;

butAmt = i;

// MAIN //
for (i = 0; i &lt; butAmt; i += 1)
{
    scr_font(-1, text_color_normal, 0);
    dry = gamTop[i];
    if (i &gt; 1) dry -= 3;
    draw_sprite(sXBOXButtons, gamSub[i], gamLef[i], dry);
    Text(gamLef[i] + (8 * 6) - 5, gamTop[i], gamTxt[i]);
}
    
// Return //
event_user(15);
Border("draw border", 6, settings_x - 8, settings_y - 8 - 5);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw Keymap
var xsp = 11; // Space for Music, Sound, Language, etc text
/// Draw Settings
Border("draw back", 6, settings_x - 8, settings_y - 8 - 2 - 5);

for (i = 0; i &lt; Key("amount"); i += 1)
{
    drx = key_x + xsp + ((i div 8) * 144);
    h = i mod 8;
    dry = key_y + key_row * h + key_gap * h;// + 4;
    scr_font(-1, text_color_normal, 0);
    Text(drx, dry + 4, Key("name", i));
    if (i != 15) draw_set_color(text_color_button);
    draw_set_blend_mode(bm_add);
    if (i != 15 &amp;&amp; scr_mouse_rect(drx + 76, dry, drx + 76 + 64, dry + 15) &amp;&amp; key_get == -1 &amp;&amp; key_lag == 0)
    {
        draw_set_color(text_color_hover);
        draw_sprite_ext(s1x1, 0, drx + 76, dry, 65, 17, 0, c_white, 0.25);
        if (action &amp;&amp; key_get == -1) // was HELD
        {
            key_get = i;
            keyboard_lastkey = -999;
            key_lag = 1;
            io_clear();
        }
    }
    draw_set_blend_mode(bm_normal);
    
    Text(drx + 80, dry + 4, Key("human", i));
}
    
// Return //
event_user(15);
Border("draw border", 6, settings_x - 8, settings_y - 8 - 5);

if (key_get != -1 &amp;&amp; key_lag == 0)
{
    draw_sprite_ext(s1x1, 0, 0, 0, SCREEN_WIDTH, SCREEN_HEIGHT, 0, c_black, 0.66);
    Border("draw", 11, (SCREEN_WIDTH / 2) - 128, (SCREEN_HEIGHT / 2) - 32);
    scr_font(-1, text_color_button, 1, 1);
    Text((SCREEN_WIDTH / 2), (SCREEN_HEIGHT / 2), "INPUT KEY FOR " + Key("name", key_get) + "...");
    key = Key("get");
    if (key != -999)
    {
        Key("check", key_get, key);
        Key("set", key_get, key);
        io_clear();
        Key("save");
        key_get = -1;
        key_lag = 1;
    }
    scr_font(-1, -1, 0, 0);
}
key_lag = max(0, key_lag - 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw Settings
var xsp = 11; // Space for Music, Sound, Language, etc text
Border("draw back", 6, settings_x - 8, settings_y - 8 - 2 - 5);

// Draw all the options on the settings //
draw_set_alpha(1);
draw_set_color(text_color_button);
// Sound, Music //
dry = settings_y + settings_row * 0 + settings_gap * 0;
for (h = 0; h &lt; 2; h += 1)
{
    drx = settings_x + settings_option_x;
    scr_font(-1, text_color_button, 1);
    didAct = 0;
    didHil = 0;
    for (i = 0; i &lt; 2; i += 1)
    {
        draw_set_blend_mode(bm_add);
        if (scr_mouse_rect(drx, dry, drx + 16, dry + 16))
        {
            draw_set_color(text_color_hover);
            draw_sprite_ext(s1x1, 0, drx + 1, dry + 1, 15, 15, 0, c_white, 0.25);
            didHil = 1;
            if (action)
            {
                if (i == 0) didAct = -1; else didAct = 1;
            }
        }
        draw_set_blend_mode(bm_normal);
        Text(drx + 8, dry + 4, settings_option[h, i]);
        drx += 22 * 8;
    }
    drx = settings_x + settings_option_x + 16;
    dox = drx;
    settings_select[h] = clamp(settings_select[h] + didAct, 0, 19);
    for (i = 0; i &lt; 20; i += 1)
    {
        if (scr_mouse_rect(drx, dry, drx + 7, dry + 16))
        {
            draw_set_color(text_color_hover);
            draw_sprite_ext(s1x1, 0, dox, dry, 8 * 20 + 1, 17, 0, c_white, 0.25); //9
            didHil = 1;
            //draw_sprite_ext(s1x1, 0, drx + 1, dry + 1, 15, 15, 0, c_white, 0.25);
            if (action) // HELD
            {
                settings_select[h] = i;
                if(h == 0){
                    global.bgm_gain_master = settings_select[h]/20;
                    Config("save","MusicLevel", global.bgm_gain_master);
                    //show_error(global.bgm_gain_master, false);
                } else if(h == 1){
                    global.sfx_gain_master = settings_select[h]/20;
                    Config("save","SoundLevel", global.sfx_gain_master);       
                }
            }
        }
        if (settings_select[h] == i) draw_sprite_ext(s1x1, 0, drx + 1, dry + 1, 7, 15, 0, c_orange, 0.25);
        drx += 8;
    }
    drx = settings_x + settings_option_x + 16;
    scr_font(-1, text_color_select, 1);
    Text(drx + (10 * 8), dry + 4, string(settings_select[h] * 5));
    
    draw_set_color(text_color_normal);
    if (didHil) draw_set_color(text_color_button);
    scr_font(-1, -1, 0);
    Text(settings_x + xsp, dry + 4, settings_name[h]); 
    
    dry += 16;
}

// Align left //
draw_set_halign(fa_left);

// Controls //
/*
draw_set_color(c_white);
draw_set_blend_mode(bm_add);
if (settings_highlight[0]) 
{ 
    draw_set_color(settings_highlight_color);
    draw_sprite_ext(s1x1, 0, settings_x - 4, settings_y + settings_row * 2 + settings_gap * 2 + 0, 320, 17, 0, c_white, 0.25);
}
draw_set_blend_mode(bm_normal);   
Text(settings_x + xsp, settings_y + settings_row * 2 + settings_gap * 2 + 4, settings_name[2]);
Text(settings_x + 145, settings_y + settings_row * 2 + settings_gap * 2 + 4, "RE-CONFIGURE");
*/

// Shader, Jokes, Language, Fullscreen //
dry = settings_y + settings_row * 3 + settings_gap * 3;
for (h = 3; h &lt; 8; h += 1)
{
    if(h == 7 and settings_select[6]) continue; //Don't show scaling if we're full screen
    var spc = settings_width / settings_options[h];
    drx = settings_x + settings_option_x;
    draw_set_color(text_color_normal);
    if (settings_highlight[h] != -1) draw_set_color(text_color_button);
    Text(settings_x + xsp, dry + 4, settings_name[h]);
    scr_font(-1, -1, 1);
    for (i = 0; i &lt; settings_options[h]; i += 1)
    {
        draw_set_color(text_color_button);
        draw_set_blend_mode(bm_add);
        if (settings_highlight[h] == i)
        { 
            draw_set_color(text_color_hover);
            draw_sprite_ext(s1x1, 0, drx, dry, spc + 1, 17, 0, c_white, 0.25); 
        }
        if (settings_select[h] == i)
        { 
            draw_set_color(text_color_select);
            draw_sprite_ext(s1x1, 0, drx + 1, dry + 1, spc + 1 - 2, 17 - 2, 0, c_orange, 0.25);
        }
        draw_set_blend_mode(bm_normal);
        if (h == 5) draw_text(drx + (spc / 2), dry + 4, settings_option[h, i]); // Language
        else Text(drx + (spc / 2), dry + 4, settings_option[h, i]);
        drx += spc;
    }
    scr_font(-1, -1, 0);
    dry += 16;
}

// Scaling //
/*
draw_set_color(text_color_normal);
if (settings_highlight[5] != -1) draw_set_color(text_color_button);
Text(settings_x + xsp, settings_y + settings_row * 7 + settings_gap * 7 + 4, settings_name[7]);
for (i = 0; i &lt; 4; i += 1)
{
    draw_set_color(text_color_button);
    draw_set_blend_mode(bm_add);
    if (settings_highlight[5] == i)
    { 
        draw_set_color(text_color_hover);
        draw_sprite_ext(s1x1, 0, settings_x + 143 + (i * 40), settings_y + settings_row * 7 + settings_gap * 7 + 0, 41, 17, 0, c_white, 0.25);
    }
    if (settings_select[5] == i) 
    {
        draw_sprite_ext(s1x1, 0, settings_x + 143 + (i * 40) + 1, settings_y + settings_row * 7 + settings_gap * 7 + 1, 41 - 2, 17 - 2, 0, c_orange, 0.25);
        draw_set_color(text_color_select);
    }
    draw_set_blend_mode(bm_normal);
    scr_font(-1, -1, 1);
    Text(settings_x + 143 + (i * 40) + 20, settings_y + settings_row * 7 + settings_gap * 7 + 4, settings_option[5, i]); 
    scr_font(-1, -1, 0);
}*/

Border("draw border", 6, settings_x - 8, settings_y - 8 - 5);

// Return //
event_user(15);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Font //
draw_set_font(global.fn_2c);
draw_set_alpha(1);

qrx = 150;
qry = 100 + 15;

// Basic title //
if (mode == "basic")
{
    event_user(10);
    
    Border("draw back", 0, title_x - 8, title_y - 15);
    
    // Draw buttons
    for (i = 0; i &lt; 3; i += 1)
    {
        draw_set_blend_mode(bm_add);
        if title_highlight[i] then 
            draw_sprite_ext(s1x1, 0, title_x, title_y + title_row * i + title_gap * i, 100, title_row + 1, 0, c_white, 0.25); 
        draw_set_blend_mode(bm_normal);
        scr_font(-1, c_white, 1);
        if title_highlight[i] then draw_set_color(title_highlight_color);   
        Text(title_x + 50, title_y + (title_row * i) + (title_gap * i) + 4, title_name[i]);
    } 
    
    Border("draw border", 0, title_x - 8, title_y - 13);
    
    logoXTimer += dt() * 0.1;
    var logoX = 40 + (sin(logoXTimer % pi) * 3);
    draw_sprite(s_barkley2_logo, 0, SCREEN_WIDTH/2, logoX);

    //Demo Graphic and Text if Needed
    if global.demoBlocker == 1 &amp;&amp; global.DEBUGMODE == 0 {
        scr_font(global.fn_small, c_yellow, 0, 0);
        draw_sprite(s_jankyDemo01, 0, SCREEN_WIDTH/1.5, SCREEN_HEIGHT/2 - 20);
        draw_text(qrx, qry, "DEMO game for backers.");
        qry += 14; 
        draw_text(qrx, qry, "Substantial levels of WONK and JANK.");
        qry += 14; 
        draw_text(qrx, qry, "Experience accordingly.");
        
        // Font //
        draw_set_font(global.fn_2c);
        draw_set_alpha(1);
    }
    
    // Stock ticker //
    /*
    draw_sprite_ext(s1x1, 0, 0, 220, SCREEN_WIDTH, 20, 0, c_black, 0.75);
    draw_set_color(make_color_rgb(80, 255, 40));
    Text(stock_x[0], stock_y, "DOW +6%");
    Text(stock_x[1], stock_y, "Oil -9%");
    Text(stock_x[2], stock_y, "Milk +75%");
    Text(stock_x[3], stock_y, "Grain +0%");
    Text(stock_x[4], stock_y, "Werthers +4%");
    Text(stock_x[5], stock_y, "BBQ +1.5%");
    Text(stock_x[6], stock_y, "ToG -45%");    
    */
}

// Game slots //
else if (mode == "gameslot" || mode = "destruct_confirm") then
    {    
    // Draw all the options on the settings //
    draw_set_alpha(1);
    scr_font(global.fn_2c, c_white, 0);
    
    // Gameslot A //
    for (i = 0; i &lt; 3; i += 1)
    {
        
        dry = gameslot_y + gameslot_row * i + gameslot_gap * i;
        Border("draw back", i + 1, gameslot_x - 8, dry - 8);
        draw_set_blend_mode(bm_add);
        if (gameslot_highlight[i]) draw_sprite_ext(s1x1, 0, gameslot_x, dry - 2, 328, 54, 0, c_white, 0.25); 
        draw_set_blend_mode(bm_normal);
        if gameslot_vacant[i] = false then
            {
            event_user(13); // game slot
            }
        else 
            {
            // Vacant slots //
            if gameslot_highlight[i] = false then draw_set_color(c_white);
            else draw_set_color(gameslot_highlight_color); 
            slotText = "Vacant Slot";
            draw_set_halign(fa_center);
            Text(gameslot_x+170, gameslot_y + gameslot_row * i + gameslot_gap * i + 20, "Vacant Slot");
            if(i == 0) Text(gameslot_x+170, gameslot_y + gameslot_row * i + gameslot_gap * i + 35, "(Canon Playthrough, do not steal)");
            }
        Border("draw border", i + 1, gameslot_x - 8, dry - 8);
    }
    draw_set_halign(fa_left);        
    // Obliterate gameslot //
    if gameslot_destruct_highlight = false then draw_set_color(c_white);
    else draw_set_color(c_red);
    Border("draw", 4, gameslot_destruct_x - 8, gameslot_destruct_y - 8);
    Text(gameslot_destruct_x + 16, gameslot_destruct_y + 4, gameslot_destruct_name);
    
    // Back //
    if gameslot_back_highlight = false then draw_set_color(c_white);
    else draw_set_color(gameslot_highlight_color);
    Border("draw", 5, gameslot_back_x - 8, gameslot_back_y - 8);
    Text(gameslot_back_x + 24, gameslot_back_y + 4, gameslot_back_name);
    }
    
// Character Select //
else if mode = "gamestart_character" then
    {
    
    drx = (SCREEN_WIDTH / 2) - 90; //settings_x - 8;
    dry = gameslot_y + 40;//settings_return_y;
    for (i = 0; i &lt; 3; i += 1)
    {
        Border("draw back", 12 + i, drx, dry);
        draw_set_color(text_color_button);
        draw_set_blend_mode(bm_add);
        if (gamHil[i]) 
        {
            draw_set_color(text_color_hover);
            draw_sprite_ext(s1x1, 0, drx, dry + 4, 178, 24, 0, c_white, 0.25);
        }
        draw_set_blend_mode(bm_normal);
        draw_set_halign(fa_center);   
        Text(drx + 90, dry + 11, character_name[i]);
        draw_set_halign(0);
        Border("draw border", 12 + i, drx, dry);
        
        dry += 40;
    }
    
    event_user(14);
    }
    
// Options //
else if mode = "settings" then
    {
    event_user(0);
    }
    
// Keymappings //
else if mode = "keymap" then
{
    event_user(1);
}
    
// Gamepad //
else if mode = "gamepad" then
{
    event_user(2);
}

// Darkness //
draw_set_alpha(darkness);
draw_set_color(c_black);
draw_rectangle(view_xview, view_yview, view_xview + view_wview, view_yview + view_hview, false);

// offal: dirty hack for gamepad cursor control
if (global.keyinput_type == KEYINPUT_GAMEPAD and timer_cc == 0) {
    draw_sprite_ext(s_wincurs, 0, o_curs.x, o_curs.y + 4, 1, 1, 0, c_white, 1);
}

/* VAPORWARE 


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
